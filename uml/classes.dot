digraph "classes" {
rankdir=BT
charset="utf-8"
"draughts.base.BaseBoard" [color="black", fontcolor="black", label=<{BaseBoard|GAME_TYPE : int<br ALIGN="LEFT"/>PSEUDO_LEGAL_KING_MOVES : NoneType<br ALIGN="LEFT"/>PSEUDO_LEGAL_MAN_MOVES : NoneType<br ALIGN="LEFT"/>STARTING_COLOR : WHITE<br ALIGN="LEFT"/>STARTING_POSITION : ndarray<br ALIGN="LEFT"/>VARIANT_NAME : str<br ALIGN="LEFT"/>col_idx<br ALIGN="LEFT"/>fen<br ALIGN="LEFT"/>friendly_form<br ALIGN="LEFT"/>game_over<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>is_threefold_repetition<br ALIGN="LEFT"/>legal_moves<br ALIGN="LEFT"/>position<br ALIGN="LEFT"/>row_idx<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>turn : BLACK, WHITE<br ALIGN="LEFT"/>|from_fen(fen: str): BaseBoard<br ALIGN="LEFT"/>is_capture(move: Move): bool<br ALIGN="LEFT"/>pop(is_finished): None<br ALIGN="LEFT"/>push(move: Move, is_finished: bool): None<br ALIGN="LEFT"/>push_from_str(str_move: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"draughts.american.Board" [color="black", fontcolor="black", label=<{Board|GAME_TYPE : int<br ALIGN="LEFT"/>STARTING_POSITION : ndarray<br ALIGN="LEFT"/>VARIANT_NAME : str<br ALIGN="LEFT"/>col_idx<br ALIGN="LEFT"/>legal_moves<br ALIGN="LEFT"/>row_idx<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"draughts.standard.Board" [color="black", fontcolor="black", label=<{Board|GAME_TYPE : int<br ALIGN="LEFT"/>PSEUDO_LEGAL_KING_MOVES : dict<br ALIGN="LEFT"/>PSEUDO_LEGAL_MAN_MOVES : dict<br ALIGN="LEFT"/>STARTING_POSITION : ndarray<br ALIGN="LEFT"/>legal_moves<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"draughts.models.Color" [color="black", fontcolor="black", label=<{Color|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"draughts.models.Figure" [color="black", fontcolor="black", label=<{Figure|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"draughts.move.Move" [color="black", fontcolor="black", label=<{Move|captured_entities : list[Figure.value]<br ALIGN="LEFT"/>captured_list : list[int]<br ALIGN="LEFT"/>is_promotion : bool<br ALIGN="LEFT"/>square_list : list[int]<br ALIGN="LEFT"/>|from_string(move: str, legal_moves: Generator): Move<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"draughts.server.PositionResponse" [color="black", fontcolor="black", label=<{PositionResponse|history : list<br ALIGN="LEFT"/>position : list<br ALIGN="LEFT"/>turn : Literal['white', 'black']<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"draughts.server.Server" [color="black", fontcolor="black", label=<{Server|APP : FastAPI<br ALIGN="LEFT"/>board<br ALIGN="LEFT"/>get_best_move_method : Optional[callable]<br ALIGN="LEFT"/>position_json<br ALIGN="LEFT"/>router : APIRouter<br ALIGN="LEFT"/>static_dir<br ALIGN="LEFT"/>templates : Jinja2Templates<br ALIGN="LEFT"/>templates_dir<br ALIGN="LEFT"/>|get_best_move(request: Request): PositionResponse<br ALIGN="LEFT"/>get_fen()<br ALIGN="LEFT"/>get_legal_moves()<br ALIGN="LEFT"/>get_position(request: Request): PositionResponse<br ALIGN="LEFT"/>index(request: Request)<br ALIGN="LEFT"/>move(request: Request, source: str, target: str): PositionResponse<br ALIGN="LEFT"/>pop(request: Request): PositionResponse<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>set_board(request: Request, board_type: Literal['standard', 'american'])<br ALIGN="LEFT"/>set_random_position(request: Request): PositionResponse<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"draughts.american.Board" -> "draughts.base.BaseBoard" [arrowhead="empty", arrowtail="none"];
"draughts.standard.Board" -> "draughts.base.BaseBoard" [arrowhead="empty", arrowtail="none"];
"draughts.american.Board" -> "draughts.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="board", style="solid"];
"draughts.standard.Board" -> "draughts.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="board", style="solid"];
"draughts.base.BaseBoard" -> "draughts.server.Server" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="board", style="solid"];
}